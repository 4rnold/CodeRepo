<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <springProperty scope="context" name="APP_NAME" source="spring.application.name" defaultValue="mayfly-cloud"/>
    <springProperty scope="context" name="PROFILE" source="spring.profiles.active" defaultValue="dev"/>

    <!--    日志存储路径-->
    <property name="LOG_PATH" value="./logs/${APP_NAME}"/>
    <!--    日志文件名-->
    <property name="FILE_NAME" value="${APP_NAME}-${PROFILE}.log"/>
    <!--    异步队列大小-->
    <property name="ASYNC_QUEUE_SIZE" value="256"/>

    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 日志记录器，日期滚动记录 -->
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：-->
    <!--1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是logname.log -->
    <!--2.如果日期没有发生变化，但是当前日志的文件大小超过<maxFileSize>指定文件大小时，对当前日志进行分割 重命名 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>
            <File>${LOG_PATH}/${FILE_NAME}</File>
        </file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
42           归档的日志文件的路径，例如今天是2017-04-26日志，当前写的日志文件路径为file节点指定，
             可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
43           而2020-05-20的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引
44          -->
            <fileNamePattern>${LOG_PATH}/${FILE_NAME}-%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <!-- 配置日志文件不能超过200M，若超过200M，日志文件会以索引0开始命名日志文件，例如logname-2013-12-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>200MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <!-- 记录日志的编码: 此处设置字符集 - -->
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>20</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>${ASYNC_QUEUE_SIZE}</queueSize>
        <!-- 队列满了不阻塞调用者-->
        <neverBlock>true</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE"/>
    </appender>

    <springProfile name="prd">
        <!--root logger日志级别-->
        <root level="info">
            <appender-ref ref="ASYNC_FILE"/>
        </root>

        <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 additivity为false表示<logger>的打印信息不会向父级或者<root>传递-->
        <!-- name指定为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
        <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
        <logger name="mayfly" level="info" additivity="false">
            <appender-ref ref="ASYNC_FILE"/>
        </logger>
    </springProfile>

    <springProfile name="dev">
        <!--root logger日志级别-->
        <root level="info">
            <appender-ref ref="STDOUT"/>
        </root>

        <logger name="mayfly" level="debug" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
    </springProfile>
</configuration>
